"""
Tests de performance avec Locust - Version Simple
Tests selon les sp√©cifications :
- Temps de chargement ‚â§ 5 secondes
- Mises √† jour ‚â§ 2 secondes
- 6 utilisateurs par d√©faut

Usage:
    locust -f test/perf/locustfile.py --host=http://localhost:5000
"""
import time
import sys
import os
from locust import HttpUser, task, between, events

# Ajouter le r√©pertoire racine au path pour les imports
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

from config.messages import PerformanceThresholds  # noqa: E402


class WebsiteUser(HttpUser):
    """Utilisateur simul√© testant les pages de chargement"""
    wait_time = between(1, 3)

    def on_start(self):
        """Initialisation - visite de la page d'accueil"""
        self.client.get("/")

    @task(3)
    def test_homepage_loading(self):
        """Test du temps de chargement de la page d'accueil (seuil: 5s)"""
        start_time = time.time()
        with self.client.get("/", catch_response=True) as response:
            response_time = time.time() - start_time

            if response.status_code == 200:
                if response_time <= PerformanceThresholds.MAX_LOADING_TIME:
                    response.success()
                else:
                    response.failure(
                        f"Page d'accueil trop lente: {response_time:.2f}s > "
                        f"{PerformanceThresholds.MAX_LOADING_TIME}s"
                    )
            else:
                response.failure(f"Erreur HTTP: {response.status_code}")

    @task(2)
    def test_login_loading(self):
        """Test du temps de chargement de la connexion (seuil: 5s)"""
        start_time = time.time()
        with self.client.post("/showSummary",
                              data={'email': 'john@simplylift.co'},
                              catch_response=True) as response:
            response_time = time.time() - start_time

            if response.status_code == 200:
                if response_time <= PerformanceThresholds.MAX_LOADING_TIME:
                    response.success()
                else:
                    response.failure(
                        f"Connexion trop lente: {response_time:.2f}s > "
                        f"{PerformanceThresholds.MAX_LOADING_TIME}s"
                    )
            else:
                response.failure(f"Erreur de connexion: {response.status_code}")

    @task(2)
    def test_booking_page_loading(self):
        """Test du temps de chargement de la page de r√©servation (seuil: 5s)"""
        start_time = time.time()
        with self.client.get("/book/Simply Lift/Future Championship",
                             catch_response=True) as response:
            response_time = time.time() - start_time

            if response.status_code == 200:
                if response_time <= PerformanceThresholds.MAX_LOADING_TIME:
                    response.success()
                else:
                    response.failure(
                        f"Page de r√©servation trop lente: {response_time:.2f}s > "
                        f"{PerformanceThresholds.MAX_LOADING_TIME}s"
                    )
            else:
                response.failure(f"Erreur page de r√©servation: {response.status_code}")

    @task(1)
    def test_public_points_loading(self):
        """Test du temps de chargement de la page des points publics (seuil: 5s)"""
        start_time = time.time()
        with self.client.get("/publicPoints", catch_response=True) as response:
            response_time = time.time() - start_time

            if response.status_code == 200:
                if response_time <= PerformanceThresholds.MAX_LOADING_TIME:
                    response.success()
                else:
                    response.failure(
                        f"Page des points trop lente: {response_time:.2f}s > "
                        f"{PerformanceThresholds.MAX_LOADING_TIME}s"
                    )
            else:
                response.failure(f"Erreur page des points: {response.status_code}")


class BookingUser(HttpUser):
    """Utilisateur simul√© testant les mises √† jour (achats de places)"""
    wait_time = between(2, 5)

    def on_start(self):
        """Connexion au d√©marrage"""
        self.client.post("/showSummary", data={'email': 'john@simplylift.co'})

    @task(1)
    def test_purchase_update_time(self):
        """Test du temps de mise √† jour lors d'un achat (seuil: 2s)"""
        start_time = time.time()
        with self.client.post("/purchasePlaces",
                              data={
                                  'club': 'Simply Lift',
                                  'competition': 'Future Championship',
                                  'places': '1'
                              },
                              catch_response=True) as response:
            response_time = time.time() - start_time

            if response.status_code == 200:
                if response_time <= PerformanceThresholds.MAX_UPDATE_TIME:
                    response.success()
                else:
                    response.failure(
                        f"Mise √† jour trop lente: {response_time:.2f}s > "
                        f"{PerformanceThresholds.MAX_UPDATE_TIME}s"
                    )
            else:
                response.failure(f"Erreur lors de l'achat: {response.status_code}")


# √âv√©nements pour afficher les r√©sultats
@events.test_start.add_listener
def on_test_start(environment, **kwargs):
    """Affichage des seuils au d√©but du test"""
    print("\n" + "="*60)
    print("üöÄ TESTS DE PERFORMANCE LOCUST")
    print("="*60)
    print("üìä Seuils configur√©s:")
    print(f"   ‚Ä¢ Chargement maximum: {PerformanceThresholds.MAX_LOADING_TIME}s")
    print(f"   ‚Ä¢ Mise √† jour maximum: {PerformanceThresholds.MAX_UPDATE_TIME}s")
    print(f"   ‚Ä¢ Utilisateurs par d√©faut: {PerformanceThresholds.DEFAULT_USERS}")
    print("="*60 + "\n")


@events.test_stop.add_listener
def on_test_stop(environment, **kwargs):
    """Affichage du r√©sum√© √† la fin du test"""
    print("\n" + "="*60)
    print("‚úÖ R√âSULTATS DES TESTS DE PERFORMANCE")
    print("="*60)

    stats = environment.stats

    print("üìà Statistiques globales:")
    print(f"   ‚Ä¢ Requ√™tes totales: {stats.total.num_requests}")
    print(f"   ‚Ä¢ √âchecs: {stats.total.num_failures}")
    print(f"   ‚Ä¢ Temps de r√©ponse m√©dian: {stats.total.median_response_time}ms")
    print(f"   ‚Ä¢ Temps de r√©ponse moyen: {stats.total.avg_response_time:.1f}ms")
    print(f"   ‚Ä¢ Temps de r√©ponse max: {stats.total.max_response_time}ms")

    # V√©rification des seuils
    violations_chargement = 0
    violations_mise_a_jour = 0

    max_loading_ms = PerformanceThresholds.MAX_LOADING_TIME * 1000
    max_update_ms = PerformanceThresholds.MAX_UPDATE_TIME * 1000

    print("\nüìã D√©tail par endpoint:")
    for entry in stats.entries.values():
        is_loading = (entry.method == "GET" or
                      (entry.method == "POST" and "/showSummary" in entry.name))
        is_update = (entry.method == "POST" and "/purchasePlaces" in entry.name)

        status = "‚úÖ"
        if is_loading and entry.max_response_time > max_loading_ms:
            violations_chargement += 1
            status = "‚ùå"
        elif is_update and entry.max_response_time > max_update_ms:
            violations_mise_a_jour += 1
            status = "‚ùå"

        print(f"   {status} {entry.method} {entry.name}: "
              f"max={entry.max_response_time}ms, "
              f"avg={entry.avg_response_time:.1f}ms")

    print("\nüéØ Conformit√© aux seuils:")
    print(f"   ‚Ä¢ Violations chargement (>{PerformanceThresholds.MAX_LOADING_TIME}s): "
          f"{violations_chargement}")
    print(f"   ‚Ä¢ Violations mise √† jour (>{PerformanceThresholds.MAX_UPDATE_TIME}s): "
          f"{violations_mise_a_jour}")

    if violations_chargement == 0 and violations_mise_a_jour == 0:
        print("   üéâ Tous les seuils sont respect√©s !")
    else:
        print("   ‚ö†Ô∏è  Des seuils ont √©t√© d√©pass√©s.")

    print("="*60 + "\n")
